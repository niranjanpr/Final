pipeline {
    agent any
	environment { 
        registry = "niranjanpr/employee-service" 
        registryCredential = 'dockerhub_id' 
        dockerImage = '' 
		SubnetID123="${env.SUBNET_ID}"
    }
   
    stages {
		
        stage ('Testing ') {
            steps {
				script{
				  if (isUnix()){
					sh 'mvnw test'
				   }
				  else{
						bat '.\\mvnw test'
					}
				}
			}
			post {
					always {
						junit '**/target/surefire-reports/TEST-*.xml'
				}
			}
		}
		 stage('Integration tests') {
		  steps{
			script{
			  if (isUnix()) {
				sh 'mvn --batch-mode failsafe:integration-test failsafe:verify'
			   }
			  else {
				bat '.\\mvnw --batch-mode failsafe:integration-test failsafe:verify'
			   }
			 }
		   }
		 }
		 
		 stage("build & SonarQube analysis") {
            steps {
				script{
				  withSonarQubeEnv('sonarserver') {
					bat '.\\mvnw clean package sonar:sonar'
				  }
				}
            }
          }
		  
	stage('Building image') {
      steps{
        script {
			// def docker = "my docker"
          dockerImage = docker.build registry //+":$BUILD_NUMBER"
        }
      }
    }
   
    stage('Pushing to DockerHub') {
     steps{  
         script {
			 if (isUnix()) {
			}else{
				 docker.withRegistry( '', registryCredential ) { 
                        dockerImage.push() 
				 }
			}
         }
        }
      }
	  stage('Cleaning up') { 
            steps { 
                bat "docker rmi $registry:$BUILD_NUMBER" 
            }
        }
	 stage('validating Cloudformation template') {
            steps {
				script {
                withAWS(credentials: 'aws-credentials', region: env.AWS_REGION) {
				// bat 'aws --version'
				// bat 'aws s3 ls'
				echo "hello ${SubnetID123}"
				echo "${env.SUBNET_ID}"
				def response = cfnValidate(file:'ecs.yml')
				echo "template description: ${response.description}"
				}
			  }
            }
        } 
		 stage('Deploy to AWS') {
            steps {
				script {
                withAWS(credentials: 'aws-credentials', region: env.AWS_REGION) {
				
				def outputs = cfnUpdate(stack:'my-stack', file:'ecs.yml', params:["SubnetID=${env.SUBNET_ID}"], timeoutInMinutes:10, tags:['TagName=Value'],  pollInterval:3000)
				}
			  }
            }
        }
	}
}
